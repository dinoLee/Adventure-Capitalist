{"version":3,"sources":["assets/Script/View/Business.ts","assets/Script/Controller/GameController.ts","assets/Script/Controller/GameDataController.ts","assets/Script/Model/StaticBusiness.ts","assets/Script/Controller/StaticDataLoader.ts","assets/Script/Model/StaticManager.ts","assets/Script/Model/UserBusiness.ts","assets/Script/View/ViewGroup.ts"],"names":["UserBusiness_1","require","GameDataController_1","_a","cc","_decorator","ccclass","property","Business","_super","__extends","_this","apply","this","arguments","businessButton","businessName","amount","managerButton","managerName","managerPriceLabel","buyButton","priceLabel","outputMoneyLabel","upgradeButton","upgradePriceLabel","progressBar","durationLabel","_data","_managerData","_isSkipUpdate","prototype","Init","myUserBusiness","GameDataController","instance","GetManager","data","Index","string","Name","Price","toString","DoInit","DoUpdateBusinessButton","DoUpdateHireButton","DoUpdateUpgradeButton","DoUpdateValue","DoSetState","state","Reset","enabled","hireManager","outputMoney","myState","UserBusinessState","None","Ready","DoUpdateRemainTime","DoTimeProgress","Play","BeginBusiness","EndBusiness","log","AddUserMoney","DoSave","OnClickBusiness","DoBunisess","beginTimeStamp","Date","now","SaveBusines","OnClickBuy","RemoveUserMoney","OnClickHireManager","OnClickUpgrade","UpgradePrice","upgrade","myRemainTime","reminaSecTime","Math","max","durationTime","sec","ceil","remainMin","floor","min","hour","myProgress","progress","update","dt","remainTime","__decorate","Button","Label","ProgressBar","Component","exports","default","ViewGroup_1","StaticDataLoader_1","GameController","viewGroup","GameController_1","Object","defineProperty","get","_instance","start","staticDataLoader","StaticDataLoader","Load","_staticBusinessDatas","_staticManagerDatas","_userBusinessDatas","_userMoney","_key","_maxBusinessCount","AddStaticBusinessDatas","myStaticBusinessDatas","AddStaticManagerDatas","myStaticManagerDatas","GetUserBusinessDatasByIndex","myIndex","index","length","element","MaxBusinessCount","myBusinessMaxCount","myAddMoney","DoSaveUserMoney","myRemoveMoney","sys","localStorage","setItem","Save","DoLoad","Array","userBusiness","UserBusiness","push","DoClearSaveData","loadUserMoney","getItem","Number","removeItem","ClearSaveData","StaticBusiness","myCallBackCompleteLoadStaticDatas","url","raw","loader","loadRes","JsonAsset","err","res","staticBusinessDatas","businessDatas","json","staticManagerDatas","managerDatas","Manager","StaticManager","myData","remainSecTime","DurationSecTime","upgradeEffect","UpgradeEffect","Output","JSON","stringify","loadData","parse","elapsedTime","cycleCount","DoFirstUserBusiness","Business_1","ViewGroup","userMoney","businesses","businessView","dataIndex","node","active","DoReset","OnClickReset"],"mappings":"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","sourcesContent":["// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport { UserBusiness, UserBusinessState } from \"../Model/UserBusiness\";\r\nimport { StaticManager } from \"../Model/StaticManager\";\r\nimport { GameDataController } from \"../Controller/GameDataController\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Business extends cc.Component {\r\n    @property(cc.Button)\r\n    businessButton: cc.Button = null;\r\n    @property(cc.Label)\r\n    businessName: cc.Label = null;\r\n    @property(cc.Label)\r\n    amount: cc.Label = null;\r\n\r\n    @property(cc.Button)\r\n    managerButton: cc.Button = null;\r\n    @property(cc.Label)\r\n    managerName: cc.Label = null;\r\n    @property(cc.Label)\r\n    managerPriceLabel: cc.Label = null;\r\n\r\n    @property(cc.Button)\r\n    buyButton: cc.Button = null;\r\n    @property(cc.Label)\r\n    priceLabel: cc.Label = null;\r\n\r\n    @property(cc.Label)\r\n    outputMoneyLabel: cc.Label = null;\r\n\r\n    @property(cc.Button)\r\n    upgradeButton: cc.Button = null;\r\n    @property(cc.Label)\r\n    upgradePriceLabel: cc.Label = null;\r\n    \r\n    @property(cc.ProgressBar)\r\n    progressBar: cc.ProgressBar = null;\r\n    @property(cc.Label)\r\n    durationLabel: cc.Label = null;\r\n\r\n    private _data:UserBusiness = null;\r\n    private _managerData:StaticManager = null;\r\n    private _isSkipUpdate: boolean = true;\r\n    \r\n    public Init(myUserBusiness:UserBusiness) \r\n    {\r\n        this._data = myUserBusiness;\r\n        this._managerData = GameDataController.instance.GetManager(this._data.data.Index);\r\n        this.businessName.string = this._data.data.Name;\r\n        this.priceLabel.string = 'Buy x1 $' + this._data.data.Price.toString();\r\n        this.managerName.string = this._managerData.Name;\r\n\r\n        this.DoInit();\r\n    }\r\n    \r\n    private DoInit()\r\n    {\r\n        this._isSkipUpdate = true;\r\n        this.DoUpdateBusinessButton();\r\n        this.DoUpdateHireButton();\r\n        this.DoUpdateUpgradeButton();\r\n        this.DoUpdateValue();\r\n        this.DoSetState(this._data.state);\r\n\r\n    }\r\n\r\n    public Reset() \r\n    {\r\n        this.DoInit();\r\n    }\r\n\r\n    private DoUpdateBusinessButton()\r\n    {\r\n        this.businessButton.enabled = !this._data.hireManager;\r\n    }\r\n    \r\n    private DoUpdateHireButton()\r\n    {\r\n        this.managerButton.enabled = !this._data.hireManager;\r\n        this.managerPriceLabel.string = (false == this._data.hireManager) ? 'Hire $' + this._managerData.Price.toString() : 'Hired!';\r\n    }\r\n    \r\n    private DoUpdateValue()\r\n    {\r\n        this.amount.string = 'x' + this._data.amount.toString();\r\n        this.outputMoneyLabel.string = '$' + this._data.outputMoney;\r\n    }\r\n    private DoSetState(myState: UserBusinessState) \r\n    {\r\n        this.DoUpdateHireButton();\r\n        this.DoUpdateUpgradeButton();\r\n\r\n        switch(myState)\r\n        {\r\n            case UserBusinessState.None:\r\n                {\r\n                    this._isSkipUpdate = true;\r\n                    this.buyButton.enabled = true;\r\n                    this.DoUpdateRemainTime(0);\r\n                    this.DoTimeProgress(0);\r\n                }\r\n                break;\r\n            case UserBusinessState.Ready:\r\n                {\r\n                    this._isSkipUpdate = true;\r\n                    this.buyButton.enabled = true;\r\n                    this.DoUpdateRemainTime(0);\r\n                    this.DoTimeProgress(0);\r\n                }\r\n                break;\r\n            case UserBusinessState.Play:\r\n                {\r\n                    this._isSkipUpdate = true;\r\n                    this.DoUpdateBusinessButton();\r\n                    this.buyButton.enabled = true;\r\n\r\n                    this.DoUpdateRemainTime(0);\r\n                    this.DoTimeProgress(0);\r\n                }\r\n                break;\r\n            case UserBusinessState.BeginBusiness:\r\n                {\r\n                    this._isSkipUpdate = false;\r\n                    this.businessButton.enabled = false;\r\n\r\n                    this.buyButton.enabled = true;\r\n                    \r\n\r\n                }\r\n                break;\r\n            case UserBusinessState.EndBusiness:\r\n                {\r\n                    cc.log('UserBusinessState.EndBusiness ' + this._data.outputMoney);\r\n                    GameDataController.instance.AddUserMoney(this._data.outputMoney);\r\n                    this.DoUpdateValue();\r\n                    this._data.state = UserBusinessState.Play;\r\n                    this.DoSetState(this._data.state);\r\n                    this.DoSave();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    public OnClickBusiness()\r\n    {\r\n        if (0 == this._data.amount) return;\r\n        this.DoBunisess();\r\n    }\r\n\r\n    private DoBunisess()\r\n    {\r\n        this._data.state = UserBusinessState.BeginBusiness;\r\n        this._data.beginTimeStamp = Date.now();\r\n        this.DoSetState(this._data.state);\r\n\r\n        this.DoSave();\r\n    }\r\n\r\n    private DoSave()\r\n    {\r\n        GameDataController.instance.SaveBusines(this._data);\r\n    }\r\n\r\n    public OnClickBuy()\r\n    {\r\n        if (false == GameDataController.instance.RemoveUserMoney(this._data.data.Price)) return;\r\n\r\n        this._data.amount++;\r\n        this.DoUpdateBusinessButton();\r\n        this.DoUpdateValue();\r\n        this.DoSave();\r\n    }\r\n\r\n    public OnClickHireManager()\r\n    {\r\n        if (0 == this._data.amount) return;\r\n        if (false == GameDataController.instance.RemoveUserMoney(this._managerData.Price)) return;\r\n\r\n        this._data.hireManager = true;\r\n        this.DoUpdateHireButton();\r\n\r\n        if (UserBusinessState.Play == this._data.state)\r\n        {\r\n            this.DoBunisess();\r\n        }\r\n        else\r\n        {\r\n            this.DoSave();\r\n        }\r\n\r\n    }\r\n\r\n    public OnClickUpgrade()\r\n    {\r\n        if (false == GameDataController.instance.RemoveUserMoney(this._data.data.UpgradePrice)) return;\r\n\r\n        this._data.upgrade = true;\r\n        this.DoUpdateUpgradeButton();\r\n        this.DoUpdateValue();\r\n        this.DoSave();\r\n    }\r\n    \r\n    private DoUpdateUpgradeButton()\r\n    {\r\n        this.upgradeButton.enabled = !this._data.upgrade;\r\n\r\n        this.upgradePriceLabel.string = (false == this._data.upgrade) ? 'Upgrade $' + this._data.data.UpgradePrice.toString() : 'Upgrade!';\r\n    }\r\n\r\n    private DoUpdateRemainTime(myRemainTime:number)\r\n    {\r\n        let reminaSecTime:number = Math.max(0, this._data.durationTime - myRemainTime) * 0.001;\r\n        let sec:number = Math.ceil(reminaSecTime % 60);\r\n        let remainMin:number = Math.floor(reminaSecTime / 60);\r\n        let min:number = Math.ceil(remainMin % 60);\r\n        let hour:number = Math.floor(remainMin / 60);\r\n        this.durationLabel.string = hour.toString() + ':' + min.toString() + ':' + sec.toString();\r\n    }\r\n\r\n    private DoTimeProgress(myProgress:number)\r\n    {\r\n        this.progressBar.progress = myProgress;\r\n    }\r\n\r\n    update (dt) \r\n    {\r\n        if (true == this._isSkipUpdate) return;\r\n\r\n        let remainTime:number = Date.now() - this._data.beginTimeStamp;\r\n        if (this._data.durationTime <= remainTime)\r\n        {\r\n            this._data.state = UserBusinessState.EndBusiness;\r\n            this.DoSetState(this._data.state);\r\n\r\n            if (true == this._data.hireManager)\r\n            {\r\n                this.DoBunisess();\r\n            }\r\n        }\r\n\r\n        this.DoUpdateRemainTime(remainTime);\r\n        this.DoTimeProgress(remainTime / this._data.durationTime);\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport ViewGroup from \"../View/ViewGroup\";\r\nimport { StaticDataLoader } from \"./StaticDataLoader\";\r\nimport { GameDataController } from \"./GameDataController\";\r\n\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class GameController extends cc.Component {\r\n    private static _instance: GameController;\r\n    \r\n    public static get instance(): GameController {\r\n    \r\n    \tif (!GameController._instance) {\r\n        \tGameController._instance = new GameController();\r\n        }\r\n        \r\n        return GameController._instance;\r\n    }\r\n\r\n    \r\n    @property(ViewGroup)\r\n    viewGroup: ViewGroup = null;\r\n\r\n\r\n    start () \r\n    {\r\n        let staticDataLoader:StaticDataLoader = new StaticDataLoader();\r\n        staticDataLoader.Load(()=>{\r\n            GameDataController.instance.Init();\r\n            this.viewGroup.Init();\r\n        });\r\n        \r\n    }\r\n}\r\n","import { StaticBusiness } from \"../Model/StaticBusiness\";\r\nimport { StaticManager } from \"../Model/StaticManager\";\r\nimport { UserBusiness } from \"../Model/UserBusiness\";\r\n\r\nexport class GameDataController\r\n{\r\n    private static _instance: GameDataController;\r\n    \r\n    public static get instance(): GameDataController {\r\n    \r\n    \tif (!GameDataController._instance) {\r\n        \tGameDataController._instance = new GameDataController();\r\n        }\r\n        \r\n        return GameDataController._instance;\r\n    }\r\n\r\n    private _staticBusinessDatas: { [Index:number] : StaticBusiness } = null;\r\n    private _staticManagerDatas: { [Index:number] : StaticManager } = null;\r\n\r\n    private _userBusinessDatas: Array<UserBusiness> = null;\r\n    \r\n    public get userBusinessDatas() : Array<UserBusiness> {\r\n        return this._userBusinessDatas;\r\n    }\r\n\r\n    private _userMoney:number = 0;\r\n    \r\n    public get userMoney() : number {\r\n        return this._userMoney;\r\n    }\r\n    \r\n    private _maxBusinessCount:number;\r\n    \r\n    public get maxBusinessCount() : number \r\n    {\r\n        return this._maxBusinessCount;\r\n    }\r\n    \r\n    private _key:string = 'UserMoney';\r\n\r\n    public AddStaticBusinessDatas(myStaticBusinessDatas: { [Index: number]: StaticBusiness }) \r\n    {\r\n        this._staticBusinessDatas = myStaticBusinessDatas;\r\n    }\r\n\r\n    public AddStaticManagerDatas(myStaticManagerDatas: { [Index: number]: StaticManager }) \r\n    {\r\n        this._staticManagerDatas = myStaticManagerDatas;\r\n    }\r\n\r\n    public GetUserBusinessDatasByIndex(myIndex: number): UserBusiness \r\n    {\r\n        for (let index = 0; index < this._userBusinessDatas.length; index++) \r\n        {\r\n            const element:UserBusiness = this._userBusinessDatas[index];\r\n            \r\n            if (element.data.Index == myIndex)\r\n            {\r\n                return element;\r\n            }\r\n        }\r\n        \r\n        return null;\r\n        \r\n    }\r\n\r\n    public MaxBusinessCount(myBusinessMaxCount: number) \r\n    {\r\n        this._maxBusinessCount = myBusinessMaxCount;\r\n    }\r\n\r\n    public GetManager(myIndex: number): StaticManager \r\n    {\r\n        return this._staticManagerDatas[myIndex];\r\n    }\r\n\r\n    public AddUserMoney(myAddMoney:number)\r\n    {\r\n        this._userMoney += myAddMoney;\r\n        this.DoSaveUserMoney();\r\n    }\r\n\r\n    public RemoveUserMoney(myRemoveMoney:number) : boolean\r\n    {\r\n        if (this._userMoney < myRemoveMoney)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        this._userMoney -= myRemoveMoney;\r\n        this.DoSaveUserMoney();\r\n        return true;\r\n    }\r\n    \r\n    private DoSaveUserMoney()\r\n    {\r\n        cc.sys.localStorage.setItem(this._key, this._userMoney);\r\n    }\r\n\r\n    public SaveBusines(myUserBusiness: UserBusiness) \r\n    {\r\n        myUserBusiness.Save();\r\n    }\r\n\r\n\r\n    public Init()\r\n    {\r\n        this.DoInit();\r\n        \r\n        this.DoLoad();\r\n    }\r\n\r\n    private DoInit()\r\n    {\r\n        this._userMoney = 0;\r\n\r\n        if (null == this._userBusinessDatas)\r\n        {\r\n            this._userBusinessDatas = new Array<UserBusiness>();\r\n        }\r\n\r\n        for (let index = 1; index <= this._maxBusinessCount; index++) {\r\n            let userBusiness:UserBusiness = new UserBusiness(this._staticBusinessDatas[index]);\r\n            this._userBusinessDatas.push(userBusiness);\r\n        }\r\n    }\r\n\r\n    public Reset()\r\n    {\r\n        this.DoClearSaveData();\r\n\r\n        this._userMoney = 0;\r\n        this.DoSaveUserMoney();\r\n\r\n        for (let index = 0; index < this._userBusinessDatas.length; index++) \r\n        {\r\n            const element = this._userBusinessDatas[index];\r\n            element.Reset();\r\n        }\r\n\r\n    }\r\n\r\n    private DoLoad() \r\n    {\r\n        let loadUserMoney:number = cc.sys.localStorage.getItem(this._key);\r\n        if (null != loadUserMoney)\r\n        {\r\n            this._userMoney = Number(loadUserMoney);\r\n        }\r\n\r\n        this.DoSaveUserMoney();\r\n\r\n        for (let index = 0; index < this._userBusinessDatas.length; index++) \r\n        {\r\n            const element = this._userBusinessDatas[index];\r\n            element.Load();\r\n            element.Save();\r\n        }\r\n\r\n    }\r\n    \r\n    // For Test And Reset Game!\r\n    private DoClearSaveData()\r\n    {\r\n        cc.sys.localStorage.removeItem(this._key);\r\n\r\n        for (let index = 0; index < this._userBusinessDatas.length; index++) \r\n        {\r\n            const element = this._userBusinessDatas[index];\r\n            element.ClearSaveData();\r\n            \r\n        }\r\n    }\r\n}","export class StaticBusiness\r\n{\r\n    Index : number;\r\n    Name : string;\r\n    Price : number;\r\n    Output : number;\r\n    DurationSecTime : number;\r\n    UpgradePrice : number;\r\n    UpgradeEffect : number;\r\n}","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport { StaticBusiness } from \"../Model/StaticBusiness\";\r\nimport { GameDataController } from \"./GameDataController\";\r\nimport { StaticManager } from \"../Model/StaticManager\";\r\n\r\n\r\nexport class StaticDataLoader\r\n{\r\n    public Load(myCallBackCompleteLoadStaticDatas: Function ) \r\n    {\r\n        var url = cc.url.raw( 'resources/Data/StaticData.json');\r\n        cc.log(url);\r\n \r\n        // cc.loader.load( url, function( err, res)\r\n        cc.loader.loadRes('Data/StaticData', cc.JsonAsset, function( err, res)\r\n            {\r\n                let staticBusinessDatas: { [Index:number] : StaticBusiness } = {};\r\n                let businessDatas:Array<StaticBusiness> = res.json.Business;\r\n                for (let index = 0; index < businessDatas.length; index++) \r\n                {\r\n                    const data = businessDatas[index];\r\n\r\n                    staticBusinessDatas[data.Index] = data;\r\n                }\r\n\r\n                GameDataController.instance.MaxBusinessCount(businessDatas.length);\r\n                GameDataController.instance.AddStaticBusinessDatas(staticBusinessDatas);\r\n\r\n                let staticManagerDatas: { [Index:number] : StaticManager } = {};\r\n                let managerDatas:Array<StaticBusiness> = res.json.Manager;\r\n                for (let index = 0; index < managerDatas.length; index++) \r\n                {\r\n                    const data = managerDatas[index];\r\n\r\n                    staticManagerDatas[data.Index] = data;\r\n                }\r\n\r\n                GameDataController.instance.AddStaticManagerDatas(staticManagerDatas);\r\n\r\n                if (null != myCallBackCompleteLoadStaticDatas)\r\n                {\r\n                    myCallBackCompleteLoadStaticDatas();\r\n                }\r\n                \r\n            }\r\n        );\r\n    }\r\n}\r\n","export class StaticManager\r\n{\r\n    Index : number;\r\n    Name : string;\r\n    Price : number;\r\n}","import { StaticBusiness } from \"./StaticBusiness\";\r\nimport { GameDataController } from \"../Controller/GameDataController\";\r\n\r\nexport enum UserBusinessState\r\n{\r\n    None,\r\n    Ready,\r\n    Play,\r\n    BeginBusiness,\r\n    EndBusiness,\r\n}\r\n\r\nexport class UserBusiness\r\n{\r\n    \r\n    private _data: StaticBusiness;\r\n    \r\n    public get data() : StaticBusiness {\r\n        return this._data;\r\n    }\r\n\r\n    \r\n    public get durationTime() : number {\r\n        return this._data.DurationSecTime * 1000;\r\n    }\r\n\r\n    \r\n    public get outputMoney() : number {\r\n        let upgradeEffect:number = (true == this.upgrade) ?this._data.UpgradeEffect : 1;\r\n        return this._data.Output * this.amount * upgradeEffect;\r\n    }\r\n    \r\n    state: UserBusinessState = UserBusinessState.None;\r\n    upgrade: boolean = false;\r\n    amount: number = 0;\r\n    hireManager: boolean = false;\r\n    remainSecTime: number = 0;\r\n    beginTimeStamp: number = 0;\r\n\r\n    private _key:string;\r\n\r\n    constructor(myData: StaticBusiness) \r\n    {\r\n        this._data = myData;\r\n        this._key = 'UserBusiness_' + this._data.Index;\r\n        this.DoInit();\r\n    }\r\n\r\n    private DoInit()\r\n    {\r\n        this.state = UserBusinessState.None;\r\n        this.upgrade = false;\r\n        this.amount = 0;\r\n        this.hireManager = false;\r\n        this.remainSecTime = 0;\r\n        this.beginTimeStamp = 0;\r\n    }\r\n\r\n    public ClearSaveData() \r\n    {\r\n        cc.sys.localStorage.removeItem(this._key);\r\n    }\r\n\r\n    public Save() \r\n    {\r\n        cc.sys.localStorage.setItem(this._key, JSON.stringify(this));\r\n    }\r\n\r\n    public Load()\r\n    {\r\n        let loadData = JSON.parse(cc.sys.localStorage.getItem(this._key));\r\n        if (null != loadData)\r\n        {\r\n            this.state = loadData.state;\r\n            this.upgrade = loadData.upgrade;\r\n            this.amount = loadData.amount;\r\n            this.hireManager = loadData.hireManager;\r\n            this.beginTimeStamp = loadData.beginTimeStamp;\r\n\r\n            if (UserBusinessState.BeginBusiness == this.state)\r\n            {\r\n                // Calculate time and money\r\n                let elapsedTime:number = Date.now() - loadData.beginTimeStamp;\r\n                let cycleCount:number = Math.floor(elapsedTime / this.durationTime);\r\n\r\n                // if one more cycle count, Add UserMoney.\r\n                if (1 <= cycleCount)\r\n                {\r\n                    if (true == this.hireManager)\r\n                    {\r\n                        GameDataController.instance.AddUserMoney(cycleCount * this.outputMoney);\r\n                        this.state = UserBusinessState.BeginBusiness;\r\n                        this.beginTimeStamp = Date.now() - (elapsedTime % this.durationTime);\r\n                    }\r\n                    else\r\n                    {\r\n                        GameDataController.instance.AddUserMoney(this.outputMoney);\r\n                        this.state = UserBusinessState.Play;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else if (null == loadData && 1 == this._data.Index)\r\n        {\r\n            this.DoFirstUserBusiness();\r\n        }\r\n    }\r\n\r\n    private DoFirstUserBusiness()\r\n    {\r\n        this.state = UserBusinessState.Play;\r\n        this.amount = 1;\r\n    }\r\n\r\n    public Reset() \r\n    {\r\n        this.ClearSaveData();\r\n        this.DoInit();\r\n        if (1 == this._data.Index)\r\n        {\r\n            this.DoFirstUserBusiness();\r\n        }\r\n        this.Save();\r\n    }\r\n}","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport Business from \"./Business\";\r\nimport { UserBusiness } from \"../Model/UserBusiness\";\r\nimport { GameDataController } from \"../Controller/GameDataController\";\r\nimport GameController from \"../Controller/GameController\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class ViewGroup extends cc.Component {\r\n    \r\n    @property(cc.Label)\r\n    userMoney: cc.Label = null;\r\n    @property(Business)\r\n    businesses: Business[] = [];\r\n\r\n    public Init()\r\n    {\r\n        for (let index = 0; index < this.businesses.length; index++) \r\n        {\r\n            const businessView = this.businesses[index];\r\n            \r\n            let dataIndex:number = index + 1;\r\n            let userBusiness:UserBusiness = GameDataController.instance.GetUserBusinessDatasByIndex(dataIndex);\r\n            if (null == userBusiness)\r\n            {\r\n                businessView.node.active = false;\r\n                continue;\r\n            }\r\n            businessView.node.active = true;\r\n            businessView.Init(userBusiness);\r\n        }\r\n    }\r\n\r\n    private DoReset()\r\n    {\r\n        for (let index = 0; index < this.businesses.length; index++) \r\n        {\r\n            const businessView = this.businesses[index];\r\n            businessView.Reset();\r\n        }\r\n    }\r\n\r\n    public OnClickReset()\r\n    {\r\n        GameDataController.instance.Reset();\r\n        this.DoReset();\r\n    }\r\n\r\n    update (dt) \r\n    {\r\n        this.userMoney.string = '$' + GameDataController.instance.userMoney;\r\n    }\r\n}\r\n"],"file":"project.dev.js"}